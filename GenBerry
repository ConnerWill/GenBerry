#!/usr/bin/env bash
#
# GenBerry
#
# Author: Alexandre Keledjian <dervishe@protonmail.ch>
# license: GPL v3.0
#
# vim: foldmarker={{{,}}} ts=4
# shellcheck source=./GenBerry.cfg
#

#{{{Parameters
CONFIG_FILE="./GenBerry.cfg"
CHOICE_MADE=false
GET_CONTENT=false
PREPARE=false
BUILDK=false
POPULATE=false
TUNE=false
MOVE_KRN_SRC=false
ADD_PORTAGE=false
MY_CFG_TXT=false
USE_MY_FSTAB=false
USE_IMG=false
USE_TARB=false
NO_ETH=false
NO_WLAN=false
USE_SERIAL=false
USE_TETHER=false
SSH=false
DEL_WP=false
WP_TMP=""

shopt -s extglob
source "$CONFIG_FILE"
#}}}

function fix_actions #{{{
{
    CHOICE_MADE=true
    OLD_IFS="$IFS"
    IFS=","
    local LIST="$1"
    for ACTION in "${LIST[@]}"; do
        case "$ACTION" in
            "retrieve_files" ) GET_CONTENT=true ;;
            "prepare_card" ) PREPARE=true ;;
            "build_kernel" ) BUILDK=true ;;
            "populate" ) POPULATE=true ;;
            "tune" ) TUNE=true ;;
            "all" ) GET_CONTENT=true
                    PREPARE=true
                    BUILDK=true
                    POPULATE=true
                    TUNE=true ;;
            * ) echo "'$ACTION' is not defined."
                IFS="$OLD_IFS"
                exit 1;;
        esac
    done
    IFS="$OLD_IFS"
} #}}}

# printResult
# take 3 arguments
# first (mandatory): the state (bool), 
# second (optionnal): error message (string),
# third (optional): stop clean propagation
#
function printResult #{{{
{
    if [[ -z "$2" ]]; then local MESSAGE=""; else local MESSAGE="$2"; fi
    if [[ "$1" -ne 0 ]]; then
        echo -e "\e[1;31m[FAIL]\e[0m\n\t$MESSAGE"
        [[ -z "$3" ]] && clean
        exit 1
    else
        echo -e "\e[1;32m[OK]\e[0m\e[37m"
    fi
    return 0
} #}}}

function announce #{{{
{
    local RESPONSE
    echo -e "We are going to proceed, here is the settings:\n"
    echo -e "* Working directory: \e[1;31m$WORK_DIR\e[0m"
    echo -e "* Device used: \e[1;31m$CARD\e[0m"
    echo -e "* Default root password: \e[1;33m$ROOT_PW\e[0m"
    echo -e "* Kernel version: \e[1;33m$KRN_VERSION\e[0m"
    [[ "$USE_IMG" = true ]] && 
        echo -e "* Location of the image: \e[1;33m$WORK_DIR/$FILE_PREFIX$RPI_VERSION-$MODE.img\e[0m"
    [[ "$USE_TARB" = true ]] && 
        echo -e "* Location of the tarball: \e[1;33m$WORK_DIR/$FILE_PREFIX$RPI_VERSION-$MODE.tar.xz\e[0m"
    [[ -n $MY_CFG ]] && echo "* Kernel configuration file used: \e[1;33m$MY_CFG\e[0m"
    [[ -n $USE_MY_FSTAB ]] && echo "* fstab file used: \e[1;33m$FSTAB_FILE\e[0m"
    [[ "$MY_CFG_TXT" = true ]] && echo "* We use your own config.txt"
    echo -e "* RaspberryPi version: \e[1;33m$RPI_VERSION\e[0m"
    echo -e "* Architecture: \e[1;33m$MYARCH\e[0m"
    echo -e "* Root filesystem: \e[1;33m$ROOT_FS\e[0m"
    echo -e "* Hostname: \e[1;33m$HN\e[0m"
    echo -e "* Timezone: \e[1;33m$TZ\e[0m"
    echo -e "* Keymaps: \e[1;33m$KEYMAPS\e[0m"
    [[ "$ADD_PORTAGE" = true ]] && echo "* Last portage tree will be added"
    [[ "$USE_TETHER" = true ]] && 
        {
            echo "* USB tethering will be configured"
            echo -e "\t* IP Board: \e[1;33m$TETHER_IP\e[0m"
            echo -e "\t* IP Gateway: \e[1;33m$TETHER_GW\e[0m"
        }
    [[ "$USE_SERIAL" = true ]] && echo "* Serial console will be configured"
    [[ "$SSH" = true ]] && echo "* sshd will be run with root connections allowed"
    echo -e "* Log file: \e[1;33m$LOG\e[0m\n"
    echo -e "You can monitor the process with: \"\e[1;33mtail -f $LOG\e[0m\e[37m\" in a terminal\n"
    echo -n "Are you ok with those settings (y/[n]) ? "
    read -r RESPONSE
    echo
    [[ "$RESPONSE" == "y" ]] ||
        {
            [[ "$DEL_WP" = true ]] && rmdir "$WORK_DIR"
            echo "ok, then we stop here."
            exit 0
        }
} #}}}

function test_requirements #{{{
{
    local SIZE_AVAIL
    echo "* Checking requirements:"
    for REQ in "${DEPENDS[@]}"; do
        echo -en "\t- $REQ: "
        which "$REQ" >> "$LOG" 2>&1
        printResult $? "You need to install $REQ."
    done
    echo -en "\t- Check available free space: "
    SIZE_AVAIL=$(df -T "$WORK_DIR" | tail -n 1 | sed -E 's/( +)/ /g' | cut -d ' ' -f 5)
    [[ $(du "$WORK_DIR" | tail -n 1 | cut -f 1) -gt $THRESHOLD ]] && SIZE_NEED=0
    [[ "$USE_IMG" = true ]] && SIZE_NEED=$((SIZE_NEED + IMG_SIZE))
    [[ "$USE_TARB" = true ]] && SIZE_NEED=$((SIZE_NEED + TARB_SIZE))
    printResult "$([[ $SIZE_NEED -lt $SIZE_AVAIL ]]; echo $?)" \
                                                "You don't have enough space."
    echo -en "\t- Gentoo public key: "
    [[ $(gpg --list-key "$GLRE_KEY" >> "$LOG" 2>&1) ]] || 
        gpg --keyserver "$KEY_SERVER" --recv-keys "$GLRE_KEY" >> "$LOG" 2>&1
    printResult $? "You need to install the key: $GLRE_KEY."
    if [[ "$USE_IMG" = false ]] && [[ "$USE_TARB" = false ]]; then
        echo -en "\t- Media inserted: "
        test -b "$CARD"
        printResult $? "You will need an sdcard inserted."
        echo -en "\t- Media not mounted: "
        [[ $(mount | grep -c "${CARD}") -eq 0 ]]
        printResult $? "${CARD} already mounted."
    fi
    echo -en "\t- Cross compilation tools: "
    which "${AARCH}-gcc" >> "$LOG" 2>&1
    printResult $?  "You need to install the $AARCH compiler."
    echo -en "\t- Root permissions: "
    printResult "$([[ $(id -u) -eq 0 ]]; echo $?)" "You need to be root."
} #}}}

function prepare_card #{{{
{
    local FILE
    local PART
    echo "* Preparing card:"
    if [[ "$USE_IMG" = true ]]; then
        echo -ne "\t- Creating the virtual disk: "
        FILE="$WORK_DIR/$FILE_PREFIX$RPI_VERSION-$MODE.img"
        dd if=/dev/zero of="$FILE" bs="$BLOC_SIZE" count="$NBR_BLOCS" >> "$LOG" 2>&1 ||
            printResult 1 "File creation failed !"
        losetup -fP "$FILE" >> "$LOG" 2>&1
        printResult $? "Volume creation failed !"
        CARD=$(losetup --list | grep "$FILE" | cut -f 1 -d ' ')
    fi
    echo -ne "\t- Partitioning: "
    sfdisk "$CARD" >> "$LOG" 2>&1 <<EOF
    $(echo -e "$PARTITION_SCHEME")
EOF
    printResult $? "Partitioning $CARD failed !"
    if [[ "$CARD" =~ "mmcblk" || "$CARD" =~ "loop" ]]; then
        PART="${CARD}p"
    else
        PART="$CARD"
    fi
    echo -ne "\t- Reloading partition table: "
    partprobe >> "$LOG" 2>&1
    printResult $? "Reloading failed !"
    echo -ne "\t- Formating boot (vfat): "
    mkfs.vfat -F 32 "${PART}"1 >> "$LOG" 2>&1
    printResult $? "vfat formating failed !"
    echo -ne "\t- Formating root ($ROOT_FS): "
    $FORMAT_ROOT "${PART}"3 >> "$LOG" 2>&1
    printResult $? "$ROOT_FS formating failed !"
    echo -ne "\t- Making swap: "
    mkswap "${PART}2"  >> "$LOG" 2>&1
    printResult $? "Swap formating failed !"
} #}}}

function mount_root #{{{
{
    local PART
    echo "* Mounting partitions:"
    echo -ne "\t- root: "
    if [[ "$CARD" =~ "mmcblk" || "$CARD" =~ "loop" ]]; then
        PART="${CARD}p"
    else
        PART="$CARD"
    fi
    mount "${PART}3" "$WORK_DIR/$ROOT" >> "$LOG" 2>&1
    printResult $? "Mounting the root partition failed !"
    echo -ne "\t- boot: "
    [[ -d "$WORK_DIR/$ROOT/boot" ]] ||
        {
            mkdir "$WORK_DIR/$ROOT/boot" >> "$LOG" 2>&1 ||
                printResult 1 "Mounting the boot partition failed !"
        }
    mount "${PART}1" "$WORK_DIR/$ROOT/boot" >> "$LOG" 2>&1
    printResult $? "Mounting the boot partition failed !"
} #}}}

function get_firmwares #{{{
{
    echo -en "\t- Firmware: "
    if [[ -d "$WORK_DIR/firmware" ]]; then
        (
            cd "$WORK_DIR/firmware" >> "$LOG" 2>&1 ||
                printResult 1 "Updating firmware failed !"
            [[ $(git pull >> "$LOG" 2>&1) -eq 0 ]] || 
                printResult 1 "Updating firmware failed !"
        )
    else
        (
            cd "$WORK_DIR" >> "$LOG" 2>&1 ||
                printResult 1 "Getting firmware failed !"
            [[ $(git clone -b stable --depth=1 "$FW_URL" >> "$LOG" 2>&1) -eq 0 ]] ||
                printResult 1 "Getting firmware failed !"
        )
    fi
    printResult 0 ""
} #}}}

function get_stage3 #{{{
{
    local FLAVOUR
    local REMOTE
    local LOCAL
    local FILE_HASH
    echo -en "\t- Stage 3: "
    REMOTE="$STAGE3_URL/$MYARCH/autobuilds/latest-stage3-$ARM_FLAVOUR.txt"
    LOCAL="$WORK_DIR/latest-stage3-$MYARCH.txt"
    [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] || 
        printResult 1 "Retrieving last flavour id failed !"
    FLAVOUR=$(grep -v "^#" < "$WORK_DIR/latest-stage3-$MYARCH.txt" | cut -d " " -f 1)
    REMOTE="$STAGE3_URL/$MYARCH/autobuilds/$FLAVOUR.DIGESTS.asc"
    LOCAL="$WORK_DIR/${FLAVOUR#*/}.DIGESTS.asc"
    [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] || 
        printResult 1 "Retrieving stage 3 signature failed !"
    LOCAL="$WORK_DIR/${FLAVOUR#*/}"
    REMOTE="$STAGE3_URL/$MYARCH/autobuilds/$FLAVOUR"
    if [[ -f "$LOCAL" ]]; then
        FILE_HASH=$(sha512sum "$LOCAL" | cut -d " " -f 1)
        if [[ $(grep -c "$FILE_HASH" < "$LOCAL.DIGESTS.asc") -eq 0 ]]; then
            [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] || 
                printResult 1 "Retrieving stage 3 failed !"
            FILE_HASH=$(sha512sum "$LOCAL" | cut -d " " -f 1)
            [[ $(grep -c "$FILE_HASH" < "$LOCAL.DIGESTS.asc") -gt 0 ]] ||
                printResult 1 "The file sha512sum don't match."
        fi
    else
        
        [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] || 
            printResult 1 "Retrieving stage 3 failed !"
        FILE_HASH=$(sha512sum "$LOCAL" | cut -d " " -f 1)
        [[ $(grep -c "$FILE_HASH" < "$LOCAL.DIGESTS.asc") -gt 0 ]] ||
            printResult 1 "The file sha512sum don't match."
    fi
    printResult 0 ""
} #}}}

function get_wifi_bt_fw #{{{
{
    local REMOTE
    local LOCAL
    local TARGET
    echo -en "\t- Wifi firmware: "
    LOCAL="$WORK_DIR/$FW_WIFI_ARCH_DEB_FILE"
    REMOTE="$FW_WIFI_ARCH_DEB_URL/$FW_WIFI_ARCH_DEB_FILE"
    if ! [[ -f "$LOCAL" ]]; then
        [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
            printResult 1 "Retrieving $FW_WIFI_ARCH_DEB_FILE failed !"
    fi
    if ! [[ "$RPI_VERSION" = "0W" ]]; then
        LOCAL="$WORK_DIR/${FW_WIFI_FILES[0]}"
        REMOTE="$FW_WIFI_URL/${FW_WIFI_FILES[0]}"
        if ! [[ -f "$LOCAL" ]]; then
            [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
                printResult 1 "Retrieving ${FW_WIFI_FILES[0]} failed !"
        fi
    else
        if ! [[ -f "$WORK_DIR/${FW_WIFI_FILES[0]}" ]]; then
            LOCAL="$WORK_DIR/$FW_WIFI_ARCH_DEB_FILE"
            ar --output "$WORK_DIR" x "$LOCAL" data.tar.xz >> "$LOG" 2>&1 ||
                printResult 1 "Extracting archives from deb file failed !"
            TARGET="./lib/firmware/brcm/${FW_WIFI_FILES[0]}"
            tar xJf "$WORK_DIR/data.tar.xz" --strip-components 4 -C "$WORK_DIR" "$TARGET" \
                2>> "$LOG" || printResult 1 "Extracting ${FW_WIFI_FILES[0]} failed !"
            rm "$WORK_DIR/data.tar.xz"
        fi
    fi
    if ! [[ -f "$WORK_DIR/${FW_WIFI_FILES[1]}" ]] || 
                ! [[ -f "$WORK_DIR/${FW_WIFI_FILES[2]}" ]]; then
        LOCAL="$WORK_DIR/$FW_WIFI_ARCH_DEB_FILE"
        ar --output "$WORK_DIR" x "$LOCAL" data.tar.xz >> "$LOG" 2>&1 ||
            printResult 1 "Extracting archives from deb file failed !"
        TARGET="./lib/firmware/brcm/${FW_WIFI_FILES[1]}"
        tar xJf "$WORK_DIR/data.tar.xz" --strip-components 4 -C "$WORK_DIR" "$TARGET" \
            2>> "$LOG" || printResult 1 "Extracting ${FW_WIFI_FILES[1]} failed !"
        TARGET="./lib/firmware/brcm/${FW_WIFI_FILES[2]}"
        tar xJf "$WORK_DIR/data.tar.xz" --strip-components 4 -C "$WORK_DIR" "$TARGET" \
                2>> "$LOG" || printResult 1 "Extracting ${FW_WIFI_FILES[2]} failed !"
        rm "$WORK_DIR/data.tar.xz"
    fi
    printResult 0 ""
    echo -en "\t- Bluetooth firmware: "
    LOCAL="$WORK_DIR/$FW_BT_FILE"
    REMOTE="$FW_BT_URL/$FW_BT_FILE"
    if ! [[ -f "$LOCAL" ]]; then
        [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
            printResult 1 "Retrieving $FW_BT_FILE failed !"
    fi
    printResult 0 ""
} #}}}

function get_portage #{{{
{
    local REMOTE
    local LOCAL
    echo -en "\t- Portage: "
    LOCAL="$WORK_DIR/$PORTAGE_FILE"
    REMOTE="$PORTAGE_URL/$PORTAGE_FILE"
    [[ $(wget "$REMOTE.gpgsig" -O "$LOCAL.asc" >> "$LOG" 2>&1) -eq 0 ]] ||
        printResult 1 "Retrieving portage tree signature failed !"
    if [[ -f "$LOCAL" ]]; then
        if [[ $(gpg --verify "$LOCAL.asc" >> "$LOG" 2>&1) -gt 0 ]]; then
            [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
                printResult 1 "Retrieving portage tree failed !"
            [[ $(gpg --verify "$LOCAL.asc" >> "$LOG" 2>&1) -eq 0 ]] ||
                printResult 1 "portage signature don't match !"
        fi
    else
        [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
            printResult 1 "Retrieving portage tree failed !"
        [[ $(gpg --verify "$LOCAL.asc" >> "$LOG" 2>&1) -eq 0 ]] ||
            printResult 1 "portage signature don't match !"
    fi
    printResult 0 ""
} #}}}

function get_kernel #{{{
{
    echo -en "\t- Kernel: "
    if [[ -d "$WORK_DIR/linux" ]]; then
        (
            cd "$WORK_DIR/linux" >> "$LOG" 2>&1 ||
                printResult 1 "Updating kernel failed !"
            [[ $(git pull >> "$LOG" 2>&1) -eq 0 ]] || 
                printResult 1 "Updating kernel failed !"
        )
    else
        (
            local RES
            cd "$WORK_DIR" >> "$LOG" 2>&1 ||
                printResult 1 "Getting kernel version $KRN_VERSION failed !"
            RES=$(git clone -b "$KRN_VERSION" --depth=1 "$KERNEL" >> "$LOG" 2>&1)
            [[ $RES -eq 0 ]] || 
                printResult 1 "Getting kernel version $KRN_VERSION failed !"
        )
    fi
    printResult 0 ""
} #}}}

function get_contents #{{{
{
    echo "* Getting the contents:"
    get_firmwares
    get_stage3
    get_kernel
    [[ "$ADD_PORTAGE" = true ]] && get_portage
    [[ -n "${FW_WIFI_FILES[0]}" ]] && get_wifi_bt_fw
} #}}}

function build_kernel #{{{
{
    echo "* Building kernel: "
    (
        cd "$WORK_DIR/linux" >> "$LOG" 2>&1 ||
            printResult 1 "Unable to go to the linux directory."
        echo -ne "\t- Configuring: "
        if [[ "$KERNEL_CONFIG" = "olddefconfig" ]]; then
            cp "$MY_CFG" .config >> "$LOG" 2>&1 ||
                printResult 1 "Unable to copy your config file."
        fi
        ARCH="$MYARCH" CROSS_COMPILE="$AARCH-" make "$KERNEL_CONFIG" >> "$LOG" 2>&1 ||
            printResult 1 "Kernel configuration failed !"
        if [[ "$KERNEL_CONFIG" != "olddefconfig" ]]; then
            sed -i '/^CONFIG_\(B43\|SSB_BLOCKIO\|BCMA_BLOCKIO\).*$/d' .config
            echo -e "# CONFIG_B43 is not set\n# CONFIG_B43LEGACY is not set" >> .config
            sed -i -E 's/^(CONFIG_CPU_FREQ_DEFAULT_GOV[A-Z_]*)=.*$/# \1 is not set/g' .config
            sed -i -E "s/^# (CONFIG_CPU_FREQ_DEFAULT_GOV_$DEFAULT_POWER_GOV) is not set/\1=y/" .config
        fi
        printResult 0 ""
        echo -ne "\t- Building: "
        IMG="zImage"
        [[ $MODE -eq 64 ]] && IMG="Image"
        ARCH="$MYARCH" CROSS_COMPILE="$AARCH-" make -j$NBR_CORE "$IMG" modules dtbs >> "$LOG" 2>&1
        printResult $? "Kernel compilation failed !"
    )
} #}}}

function install_firmware #{{{
{
    local BRD_DIR
    local RES
    echo -ne "\t- Installing firmware: "
    cp -r "$WORK_DIR"/{firmware/boot/overlays,"$ROOT"/boot/} >> "$LOG" 2>&1 ||
        printResult 1 "Installing overlays failed !"
    for FILE in "${FILESET_MIN[@]}"; do
        cp -r "$WORK_DIR"/{firmware/boot/"$FILE","$ROOT"/boot/} >> "$LOG" 2>&1 ||
            printResult 1 "Installing $FILE failed !"
    done
    for FILE in "${FILESET_BOOT[@]}"; do
        cp -r "$WORK_DIR"/{firmware/boot/"$FILE","$ROOT"/boot/} >> "$LOG" 2>&1 ||
            printResult 1 "Installing $FILE failed !"
    done
    printResult 0
    if [[ "$NO_WLAN" = false ]]; then
        echo -ne "\t- Adding wifi firmware: "
        [[ -d "$WORK_DIR/$ROOT/lib/firmware/brcm" ]] || 
            {
                mkdir -p "$WORK_DIR/$ROOT/lib/firmware/brcm" ||
                    printResult 1 "Unable to make the directory"
            }
        for FILE in "${FW_WIFI_FILES[@]}"; do
            RES=$(cp "$WORK_DIR"/{"$FILE","$ROOT/lib/firmware/brcm/"} >> "$LOG" 2>&1)
            [[ "$RES" -eq 0 ]] || 
                printResult 1 "Installing $FILE failed !"
        done
        printResult 0 ""
        echo -ne "\t- Adding bluetooth firmware: "
        cp "$WORK_DIR"/{"$FW_BT_FILE","$ROOT/lib/firmware/brcm/"} >> "$LOG" 2>&1
        printResult $? "Installing $FW_BT_FILE failed !"
    fi
    echo -ne "\t- Installing broadcom driver: "
    [[ $MODE -eq 32 ]] && BRD_DIR="" || BRD_DIR="broadcom/"
    cp "$WORK_DIR/"{"linux/arch/$MYARCH/boot/dts/${BRD_DIR}$BRCM_FILE","$ROOT/boot"} \
                >> "$LOG" 2>&1
    printResult $? "Installing brcm drivers failed !"
} #}}}

function install_kernel #{{{
{
    local KRN_RELEASE
    echo -ne "\t- Installing kernel: "
    cp "$WORK_DIR/"{"linux/arch/$MYARCH/boot/Image","$ROOT/boot/$KERNEL_FILE"} \
                >> "$LOG" 2>&1
    printResult $? "Installing kernel failed !"
    echo -ne "\t- Installing kernel modules: "
    (
        cd "$WORK_DIR/linux" >> "$LOG" 2>&1 ||
            printResult 1 "Unable to reach de kernel sources directory"
        ARCH="$MYARCH" CROSS_COMPILE="$AARCH-" make modules_install \
                        INSTALL_MOD_PATH="$WORK_DIR/$ROOT" >> "$LOG" 2>&1
        printResult $? "Installing kernel modules failed !"
    )
    KRN_RELEASE=$(cat "$WORK_DIR/linux/include/config/kernel.release")
    echo -ne "\t- Correcting sources symbolic links in modules directory: "
    rm "$WORK_DIR/$ROOT/lib/modules/$KRN_RELEASE"/{build,source} >> "$LOG" 2>&1 ||
        printResult 1 "Removing symbolic links failed !"
    ln -s /usr/src/linux "$WORK_DIR/$ROOT/lib/modules/$KRN_RELEASE/build" >> "$LOG" 2>&1 ||
        printResult 1 "Unable to create build symbolic link !"
    ln -s /usr/src/linux "$WORK_DIR/$ROOT/lib/modules/$KRN_RELEASE/source" >> "$LOG" 2>&1
    printResult $? "Unable to create source symbolic link !"
    echo -ne "\t- Creating kernel source directory: "
    mkdir "$WORK_DIR/$ROOT/usr/src/$KRN_RELEASE" >> "$LOG" 2>&1 ||
        printResult 1 "Creating kernel source directory failed !"
    ln -s "$KRN_RELEASE" "$WORK_DIR/$ROOT/usr/src/linux" >> "$LOG" 2>&1
    printResult $? "Creating linux directory symbolic link failed !"
    echo -ne "\t- Installing kernel config and Makefile: "
    cp "$WORK_DIR"/{linux/{.config,Makefile},"$ROOT/usr/src/$KRN_RELEASE/"} >> "$LOG" 2>&1
    printResult $? "Copying files failed !"
    if [[ "$MOVE_KRN_SRC" = true ]]; then
        echo -ne "\t- Installing kernel sources: "
        (
            cd "$WORK_DIR/linux" >> "$LOG" 2>&1 ||
                printResult 1 "Unable to reach the kernel source directory"
            ARCH="$MYARCH" CROSS_COMPILE="$AARCH-" make distclean >> "$LOG" 2>&1
            cp -R ./* "$WORK_DIR/$ROOT/usr/src/$KRN_RELEASE/" >> "$LOG" 2>&1
            printResult $? "Copying sources failed !"
        )
    fi
} #}}}

function populate #{{{
{
    local FLAVOUR
    echo "* Populating the root: "
    # stage 3
    echo -ne "\t- Installing stage 3: "
    FLAVOUR=$(grep -v "^#" < "$WORK_DIR/latest-stage3-$MYARCH.txt" | cut -d " " -f 1)
    tar xpf "$WORK_DIR/${FLAVOUR#*/}" --xattrs-include='*.*' \
                    --numeric-owner -C "$WORK_DIR/$ROOT" >> "$LOG" 2>&1
    printResult $? "Extracting stage 3 failed !"
    # Portage
    if [[ "$ADD_PORTAGE" = true ]]; then
        echo -ne "\t- Installing portage tree: "
        mkdir -p "$WORK_DIR/$ROOT/var/db/repos/gentoo" ||
            printResult 1 "Unable to create local gentoo repos !"
        tar xpf "$WORK_DIR/$PORTAGE_FILE" --strip-components=1 \
                    -C "$WORK_DIR/$ROOT/var/db/repos/gentoo" >> "$LOG" 2>&1
        printResult $? "Extracting portage failed !"
    fi
    install_firmware
    install_kernel
} #}}}

function fix_network #{{{
{
    local MYKEY
    local LCONTENT
    local LFILE
    if [[ "$NO_ETH" = false ]]; then
        echo -ne "\t- Fixing Network (eth0): "
        echo "config_eth0=\"dhcp\"" > "$WORK_DIR/$ROOT/etc/conf.d/net" 2>> "$LOG"
        (
            cd "$WORK_DIR/$ROOT/etc/init.d" >> "$LOG" 2>&1 || 
                printResult 1 "Switching to \"$WORK_DIR/$ROOT/etc/init.d\" failed"
            ln -s ./net.{lo,eth0} >> "$LOG" 2>&1
            printResult $? "Linking network init script failed !"
        )
    fi
    if [[ "$NO_WLAN" = false ]]; then
        echo -ne "\t- Fixing Network (wlan0): "
        echo "config_wlan0=\"dhcp\"" >> "$WORK_DIR/$ROOT/etc/conf.d/net" 2>> "$LOG"
        (
            cd "$WORK_DIR/$ROOT/etc/init.d" >> "$LOG" 2>&1 || 
                printResult 1 "Switching to \"$WORK_DIR/$ROOT/etc/init.d\" failed"
            ln -s ./net.{lo,wlan0} >> "$LOG" 2>&1
            printResult $? "Linking network init script failed !"
        )
    fi
    if [[ "$USE_TETHER" = true ]]; then
        echo -ne "\t- Configure usb tethering: "
        sed -E -i "s/(.*)/\1 $TETHER_CMD/" "$WORK_DIR/$ROOT/boot/cmdline.txt" >> "$LOG" 2>&1 ||
            printResult 1 "cmdline.txt modification failed !"
        echo "$TETHER_CFG" >> "$WORK_DIR/$ROOT/boot/config.txt" 2>> "$LOG" ||
            printResult 1 "config.txt modification failed !"
        LCONTENT="config_usb0=\"$TETHER_IP/24\"\nroutes_usb0=\"default via $TETHER_GW\""
        echo -e "$LCONTENT" > "$WORK_DIR/$ROOT/etc/conf.d/net" 2>> "$LOG" ||
            printResult 1 "Failed to create the usb0 conf file !"
        (
            cd "$WORK_DIR/$ROOT/etc/init.d" >> "$LOG" 2>&1 || 
                printResult 1 "Switching to \"$WORK_DIR/$ROOT/etc/init.d\" failed"
            ln -s /etc/init.d/net.lo net.usb0 >> "$LOG" 2>&1 ||
                printResult 1 "Linking network init script failed !"
        )
        echo -e "modules=\"g_ether\"" >> "$WORK_DIR/$ROOT/etc/conf.d/modules" 2>> "$LOG"
        printResult $? "Unable to add g_ether to modules list to load"
    fi
    if [[ "$SSH" = true ]]; then
        echo -ne "\t- Enabling ssh server: "
        (
            cd "$WORK_DIR/$ROOT" >> "$LOG" 2>&1 ||
                printResult 1 "Switching to \"$WORK_DIR/$ROOT\" failed"
            ln -s /etc/init.d/sshd ./etc/runlevels/default/. ||
                printResult 1 "Enabling sshd service failed !"
        )
        MYKEY=$(ssh-add -L 2> LOG)
        if [[ $? = 0 ]] && [[ -n "$MYKEY" ]]; then
            mkdir "$WORK_DIR/$ROOT/root/.ssh" ||
                printResult 1 "Unable to create ssh directory for root"
            echo "$MYKEY" > "$WORK_DIR/$ROOT/root/.ssh/authorized_keys" ||
                printResult 1 "Importing public key failed"
            chown -R root:root "$WORK_DIR/$ROOT/root/.ssh" ||
                printResult 1 "Unable to setup ownership on ssh directory"
            chmod -R 700 "$WORK_DIR/$ROOT/root/.ssh" ||
                printResult 1 "Unable to setup permissions on ssh directory"
            LFILE="$WORK_DIR/$ROOT/etc/ssh/sshd_config"
            sed -E -i "s/^#?(PermitRootLogin)(.*)$/\1 prohibit-password/" "$LFILE" >> "$LOG" 2>&1
            printResult $? "Enabling root connection on sshd failed !"
        else
            LFILE="$WORK_DIR/$ROOT/etc/ssh/sshd_config"
            sed -E -i "s/^#?(PermitRootLogin)(.*)$/\1 yes/" "$LFILE" >> "$LOG" 2>&1
            printResult $? "Enabling root connection on sshd failed !"
        fi
    fi
    echo -ne "\t- Setting DNS server address: "
    echo "nameserver $DNS" > "$WORK_DIR/$ROOT/etc/resolv.conf" 2>> "$LOG"
    printResult $? ""
    echo -ne "\t- Enabling time server client: "
    (
        cd "$WORK_DIR/$ROOT" >> "$LOG" 2>&1 ||
            printResult 1 "Switching to \"$WORK_DIR/$ROOT\" failed"
        ln -s /etc/init.d/busybox-ntpd ./etc/runlevels/default/.
        printResult $? "Enabling busybox-ntpd service failed !"
    )
} #}}}

function fix_time #{{{
{
    echo -ne "\t- Fixing Time: "
    if [[ -f "$WORK_DIR/$ROOT/etc/runlevels/boot/hwclock" ]]; then
            rm "$WORK_DIR/$ROOT/etc/runlevels/boot/hwclock" >> "$LOG" 2>&1 ||
                printResult 1 "Disabling hwclock service failed !"
    fi
    (
        cd "$WORK_DIR/$ROOT" >> "$LOG" 2>&1 ||
            printResult 1 "Switching to \"$WORK_DIR/$ROOT\" failed"
        ln -s /etc/init.d/swclock ./etc/runlevels/boot/. >> "$LOG" 2>&1
        printResult $? "Enabling swclock service failed !"
    )
    echo -ne "\t- Fixing Timezone: "
    echo "$TZ" > "$WORK_DIR/$ROOT/etc/timezone" 2>> "$LOG"
    (
        cd "$WORK_DIR/$ROOT" >> "$LOG" 2>&1 ||
            printResult 1 "Switching to \"$WORK_DIR/$ROOT\" failed"
        ln -sf "/usr/share/zoneinfo/$TZ" ./etc/localtime >> "$LOG" 2>&1
        printResult $? "Fixing timezone failed !"
    )
} #}}}

function create_tarball #{{{
{
    echo -ne "* Creating the tarball: "
    tar -cJf "$WORK_DIR/$FILE_PREFIX$RPI_VERSION-$MODE.tar.xz" \
                                -C "$WORK_DIR/$ROOT" ./ >> "$LOG" 2>&1
    printResult $? "Failed to create the file."
} #}}}

function fstab_builder #{{{
{
    for INDEX in $1; do
        blkid "$INDEX" | 
            sed -E 's/((PART)?UUID|BLOCK_SIZE)="[^"]*"//g' | 
            sed -E 's/:( )*|"/\t/g' | 
            sed 's/TYPE=//g' | 
            sed -E 's/(swap)/none\t\1\tsw\t0 0/' | 
            sed -E 's/(vfat)/\/boot\t\1\tnoauto,noatime\t1 2/' | 
            sed -E 's/(ext.?)/\/\t\1\tnoatime\t0 0/' | 
            sed -E 's/(f2fs)/\/\t\1\trw\t0 0/' | 
            sed -E 's/^\/dev\/[[:alnum:]]*([[:digit:]])(.*)$/\/dev\/mmcblk0p\1\2/g'
    done
    return 0
} #}}}

function firstRun_builder #{{{
{
    echo -ne "\t- Installing firstRun script in /etc/local.d: "
    echo -e "$FIRSTRUN" > "$WORK_DIR/$ROOT/etc/local.d/firstRun.start" 2>> "$LOG" ||
        printResult 1 "Failed to copy the content in the file"
    chmod +x "$WORK_DIR/$ROOT/etc/local.d/firstRun.start" >> "$LOG" 2>&1
    printResult $? "Failed to activate the script"
} #}}}

function tune #{{{
{
    echo "* Tuning system: "
    if [[ "$USE_TARB" = false ]]; then
        FSTAB=$(sfdisk -l "$CARD" -o Device | grep "^$CARD")
        echo -ne "\t- Tuning fstab: "
        fstab_builder "$FSTAB" > "$WORK_DIR/$ROOT/etc/fstab"
        printResult $? "fstab tuning failed !"
    elif [[ "$USE_MY_FSTAB" = true ]]; then
        echo -ne "\t- Copying fstab: "
        cp "$FSTAB_FILE" "$WORK_DIR/$ROOT/etc/fstab" >> "$LOG" 2>&1
        printResult $? "Copy failed !"
    fi
    echo -ne "\t- Tuning cmdline.txt: "
    if [[ "$USE_TARB" = true ]] && [[ "$USE_MY_FSTAB" = false ]]; then
        echo "root=YOUR_ROOT_PARTITION_HERE rootfstype=YOUR_ROOT_FS_HERE rootwait" > "$WORK_DIR/$ROOT/boot/cmdline.txt"
        printResult $? "cmdline.txt file creation failed !"
    else
        sed -E "s/\s+/ /g" < "$WORK_DIR/$ROOT/etc/fstab" | cut -d ' ' -f 1,2,3 | grep "/ " | 
            sed -E 's/([^ ]*) ([^ ]*) ([^ ]*)/root=\1 rootfstype=\3 rootwait/' > "$WORK_DIR/$ROOT/boot/cmdline.txt"
        printResult $? "cmdline.txt file installation failed !"
    fi
    echo -ne "\t- Fixing root password: "
    sed -i "s|root:\*:|root:$ROOT_PW_HASH:|" "$WORK_DIR/$ROOT/etc/shadow"
    printResult $? "Fixing root password failed !"

    echo -ne "\t- Tuning inittab: "
    sed -E -i "s|^(f0:12345.*)$|#\1|" "$WORK_DIR/$ROOT/etc/inittab" >> "$LOG" 2>&1
    printResult $? "Preventing serial console allotment failed !"

    echo -ne "\t- Tuning config.txt: "
    if [[ "$MY_CFG_TXT" = true ]]; then
        cp "$CONFIG_TXT_CONTENT" "$WORK_DIR/$ROOT/boot/config.txt" 2>> "$LOG"
        printResult $? "Config file installing failed !"
    else
        [[ $MODE -eq 64 ]] && CONFIG_TXT_CONTENT="${CONFIG_TXT_CONTENT}\narm_64bit=1"
        if [[ $RPI_VERSION = "0W" ]] || [[ $RPI_VERSION = "3" ]] || 
            [[ $RPI_VERSION = "3P" ]] || [[ $RPI_VERSION = "4" ]]; then
                CONFIG_TXT_CONTENT="$CONFIG_TXT_CONTENT\ndtparam=krnbt=on"
        fi
        echo -e "$CONFIG_TXT_CONTENT" > "$WORK_DIR/$ROOT/boot/config.txt" 2>> "$LOG"
        printResult $? "Config file installing failed !"
    fi

    if [[ "$USE_SERIAL" = true ]]; then
        echo -ne "\t- Configure serial comm: "
        sed -E -i "s/(.*)/\1 $SERIAL_CMD/" "$WORK_DIR/$ROOT/boot/cmdline.txt" >> "$LOG" 2>&1 ||
            printResult 1 "cmdline.txt modification failed !"
        echo "$SERIAL_CFG" >> "$WORK_DIR/$ROOT/boot/config.txt" 2>> "$LOG" ||
            printResult 1 "config.txt modification failed !"
        sed -E -i "s|^#?(s0.*)$|$SERIAL_ITB|" "$WORK_DIR/$ROOT/etc/inittab" >> "$LOG" 2>&1
        printResult $? "inittab modification failed !"
    fi

    echo -ne "\t- Tuning make.conf: "
    sed -E -i "s|^(CFLAGS.*)$|CFLAGS=\"$MCFLAGS\"\nMAKEOPTS=\"-j$NB_JOBS\"|" "$WORK_DIR/$ROOT/etc/portage/make.conf" >> "$LOG" 2>&1
    printResult $? "Fixing CFLAGS and MAKEOPTS failed !"

    echo -ne "\t- Fixing Keymap: "
    echo "keymap=\"$KEYMAPS\"" > "$WORK_DIR/$ROOT/etc/conf.d/keymaps" 2>> "$LOG"
    printResult $? "Fixing keymap failed !"
    echo -ne "\t- Fixing Hostname: "
    echo "hostname=\"$HN\"" > "$WORK_DIR/$ROOT/etc/conf.d/hostname" 2>> "$LOG"
    printResult $? "Fixing hostname failed !"
    if [[ "$NO_WLAN" = false ]] || [[ "$NO_ETH" = false ]] || [[ "$USE_TETHER" = true ]]; then
        fix_network
    else
        [[ -f "$WORK_DIR/$ROOT/etc/runlevels/default/netmount" ]] &&
            {
                echo -ne "\t- Disabling netmount service: "
                rm "$WORK_DIR/$ROOT/etc/runlevels/default/netmount" >> "$LOG" 2>&1
                printResult $? "Disabling netmount failed !"
            }
    fi
    fix_time
} #}}}

function clean #{{{
{
    echo "* Cleaning system: "
    if [[ "$USE_TARB" = false ]]; then
        echo -ne "\t- Syncing filesystem: "
        sync >> "$LOG" 2>&1
        printResult $? "Syncing failed !" 0
        echo -ne "\t- Unmounting $CARD: "
        [[ 0 -eq $(mount | grep -c "$CARD") ]] || 
                    umount "$WORK_DIR/$ROOT"/{boot,} >> "$LOG" 2>&1
        printResult $? "Unmounting $CARD failed !" 0
        if [[ "$USE_IMG" = true ]] && ! [[ "$CARD" = "loopback" ]]; then
            echo -ne "\t- Destroying the virtual device $CARD: "
            losetup -d "$CARD" >> "$LOG" 2>&1
            printResult $? "Destroying $CARD failed !" 0
        fi
    else
        echo -ne "\t- Cleaning tarball files: "
        rm -Rf "${WORK_DIR:?}/${ROOT:?}/" >> "$LOG" 2>&1
        printResult $? "Unable to delete the files." 0
    fi
} #}}}

function show_help #{{{
{
    echo -e "usage: ${0#*/} <options>
Option's list:
\t-h\t\tDisplay this help message\n
\t-b <type>\tType of the board:
\t\t\t0 for raspberryPi 0
\t\t\t1 for raspberryPi 1 family
\t\t\t2 for raspberryPi 2 family
\t\t\t3 for raspberryPi 3B
\t\t\t3P for raspberryPi 3B+
\t\t\t4 for raspberryPi 4B
\t\t\tActual value is $RPI_VERSION\n
\t-m <dir>\tSet the mount point for the disk
\t\t\tActual value is a temporary directory\n
\t-B <branch>\tInstall a specific kernel branch (from rPi kernel github repository)
\t\t\tActual value is the latest official branch\n
\t-d <device>\tDevice to use for install:
\t\t\tActual value is $CARD\n
\t-k <lang>\tLang for the keymaps
\t\t\tActual value is \"$KEYMAPS\"\n
\t-c <file>\tUse your own kernel config file
\t\t\tYou need to use the absolute path\n
\t-H <hostname>\tFix the hostname
\t\t\tActual value is \"$HN\"\n
\t-t <timezone>\tFix the timezone
\t\t\tActual value is \"$TZ\"\n
\t-f <filesystem>\tFilesystem for the root partition:
\t\t\tf2fs, ext4
\t\t\tActual value is $ROOT_FS\n
\t-a <actions>\tActions to perform \e[1;33m[Actually, for testing purpose]\e[1;0m
\t\t\tYou can pick the actions in the following list:
\t\t\t(all, retrieve_files, prepare_card, build_kernel, populate, tune)
\t\t\tActual value is \"all\"\n
\t-C <file>\tUse your own config.txt file
\t\t\tYou need to use the absolute path\n
\t-M <size>\tMode: 32 or 64 bits
\t\t\tThis apply only on rPi 3, 3P and 4
\t\t\tActual value: $MODE\n
\t-F <file>\tUse your own fstab file.
\t\t\tOnly for use in conjonction with the -T option.\n
\t-s\t\tCopy the kernel sources on the card,
\t\t\tBeware that this will run make distclean on the actual sources.
\t\t\tActual value is \"$MOVE_KRN_SRC\"\n
\t-p\t\tCopy the portage tree,
\t\t\tActual value is \"$ADD_PORTAGE\"\n
\t-i\t\tBuild an image instead of writing directly on the media.\n
\t-T\t\tBuild a tarball instead of writing directly on the media.
\t\t\tIf you want a valid fstab, you have to privide it with the -F option.\n
\t-u\t\tEnable serial communications.
\t\t\tMight disable bluetooth on some card.\n
\t-U\t\tEnable usb tethering.
\t\t\tNeed some tweak on your computer.\n
\t-S\t\tEnable sshd service with root login allowed.\n
After the first boot, follow those steps:\n
\t* emerge --sync
\t* perl-cleaner --all
\t* emerge -vauD --newuse @world
\t* emerge -a --depclean
\t* emerge -vaD wpa_supplicant # If you want to use wifi
\t* shutdown -r now
"
} #}}}

function build_workplace #{{{
{
    if [[ -z "$WP_TMP" ]]; then
        WORK_DIR=$(mktemp -d -t bldGenPiImg-XXXXXXXXXX)
        DEL_WP=true
    else
        [[ -d "$WP_TMP" ]] || 
            {
                mkdir -p "$WP_TMP"
                DEL_WP=true
            }
        WORK_DIR=$(cd "$WP_TMP" && pwd)
    fi
    if ! [[ -d "$WORK_DIR/$ROOT" ]]; then
        mkdir "$WORK_DIR/$ROOT" >> /dev/null 2>&1
        if [[ $? = 1 ]]; then
            echo  "Creating the root partition failed !"
            exit 1
        fi
    fi
} #}}}

# Retrieve the last kernel version
KRN_VERSION=$(git ls-remote "$KERNEL" | grep -v "pull\|patch" | grep head | 
            cut -d '/' -f 3 | grep "^rpi-[0-9].*y$" | sort -rV | head -n 1)

while getopts "hb:m:B:d:k:c:H:t:f:a:C:M:F:spiuUST" OPTION; do #{{{
    case $OPTION in
        h ) show_help && exit 0 ;;
        b ) RPI_VERSION="$OPTARG"
            if ! [[ -f "./Configs/rpi${RPI_VERSION}.conf" ]]; then
                echo "Error: $RPI_VERSION is not a valid board."
                exit 1
            fi ;;
        m ) WP_TMP="$OPTARG" ;;
        B ) KRN_VERSION="$OPTARG" ;;
        d ) CARD="$OPTARG" ;;
        k ) KEYMAPS="$OPTARG" ;;
        c ) if ! [[ -f "$OPTARG" ]]; then
                echo "$OPTARG is not a file."
                exit 1
            fi
            MY_CFG=$(readlink -f "$OPTARG") ;;
        H ) HN="$OPTARG" ;;
        t ) TZ="$OPTARG" ;;
        f ) ROOT_FS="$OPTARG" ;;
        a ) fix_actions "$OPTARG" ;;
        C ) if ! [[ -f "$OPTARG" ]]; then
                echo "$OPTARG is not a file."
                exit 1
            fi
            MY_CFG_TXT=true
            CONFIG_TXT_CONTENT=$(readlink -f "$OPTARG") ;;
        M ) if [[ $OPTARG -ne 32 && $OPTARG -ne 64 ]]; then
                echo "-M allowed values are: 32 and 64."
                exit 1
            fi
            MODE=$OPTARG ;;
        F ) if ! [[ -f "$OPTARG" ]]; then
                echo "$OPTARG is not a file."
                exit 1
            fi
            USE_MY_FSTAB=true
            FSTAB_FILE=$(readlink -f "$OPTARG") ;;
        s ) MOVE_KRN_SRC=true ;;
        p ) ADD_PORTAGE=true ;;
        i ) USE_IMG=true
            CARD=loopback ;;
        u ) USE_SERIAL=true ;;
        U ) USE_TETHER=true ;;
        S ) SSH=true ;;
        T ) USE_TARB=true
            CARD=tarball ;;
        * ) show_help && exit 1 ;;
    esac
done #}}}

source "./Configs/rpi${RPI_VERSION}.conf"
[[ -n "$MY_CFG" ]] && KERNEL_CONFIG="olddefconfig"

if [[ "$ROOT_FS" = "f2fs" ]]; then
    FORMAT_ROOT="$FORMAT_ROOT_F2FS"
else
    FORMAT_ROOT="$FORMAT_ROOT_EXT4"
fi
if [[ $MODE -eq 64 ]]; then
    [[ -z "$AARCH" ]] && AARCH="$AARCH_64"
    [[ -z "$MCFLAGS" ]] && MCFLAGS="$MCFLAGS_64"
    [[ -z "$ARM_FLAVOUR" ]] && ARM_FLAVOUR="$ARM_FLAVOUR_64"
    [[ -z "$KERNEL_CONFIG" ]] && KERNEL_CONFIG="$KERNEL_CONFIG_64"
    [[ -z "$KERNEL_FILE" ]] && KERNEL_FILE="$KERNEL_FILE_64"
    MYARCH="arm64"
else
    [[ -z "$AARCH" ]] && AARCH="$AARCH_32"
    [[ -z "$MCFLAGS" ]] && MCFLAGS="$MCFLAGS_32"
    [[ -z "$ARM_FLAVOUR" ]] && ARM_FLAVOUR="$ARM_FLAVOUR_32"
    [[ -z "$KERNEL_CONFIG" ]] && KERNEL_CONFIG="$KERNEL_CONFIG_32"
    [[ -z "$KERNEL_FILE" ]] && KERNEL_FILE="$KERNEL_FILE_32"
    MYARCH="arm"
fi

$CHOICE_MADE || fix_actions all
build_workplace
LOG="$WORK_DIR/builder.log"
announce
touch "$LOG" > /dev/null
test_requirements
$GET_CONTENT && get_contents
$BUILDK && build_kernel
if [[ "$USE_TARB" = false ]]; then
    $PREPARE && prepare_card
    ( $POPULATE || $TUNE ) && mount_root
fi
$POPULATE && populate
$TUNE && tune
[[ "$NO_ETH" = false ]] && firstRun_builder
[[ "$USE_TARB" = true ]] && create_tarball
clean
exit 0
