#!/usr/bin/env bash

#{{{Parameters
ARM_FLAVOUR_1="armv6j_hardfp"   # For Pi 1 in 32 bits mode
ARM_FLAVOUR_3="armv7a_hardfp"   # For Pi 2, 3, 3+ in 32 bits mode
ARM_FLAVOUR_4="arm64"           # For Pi 3 and 4 in 64 bits mode
MODE=64
KERNEL_CONFIG_1="bcmrpi_defconfig"
KERNEL_CONFIG_2="bcm2709_defconfig"
KERNEL_CONFIG_3="bcmrpi3_defconfig"
KERNEL_CONFIG_4="bcm2711_defconfig"
CARD="/dev/mmcblk0"
IMG_PREFIX="GenBerry"
ROOT="root"
TZ="Europe/Paris"
KEYMAPS="fr"
HN="gibolin"
GLRE_KEY="13EBBDBEDE7A12775DFDB1BABB572E0E2D182910"
KEY_SERVER="hkps://keys.gentoo.org"
FW_URL="https://github.com/raspberrypi/firmware"
FW_WIFI_URL="https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/brcm"
FW_WIFI_ARCH_DEB_URL="http://archive.raspberrypi.org/debian/pool/main/f/firmware-nonfree"
FW_WIFI_ARCH_DEB_FILE="firmware-brcm80211_20190114-1+rpt3_all.deb"
FW_WIFI_FILES_3=("brcmfmac43430-sdio.raspberrypi,3-model-b.txt" "brcmfmac43430-sdio.bin" "brcmfmac43430-sdio.clm_blob")
FW_WIFI_FILES_3P=("brcmfmac43455-sdio.raspberrypi,3-model-b-plus.txt" "brcmfmac43455-sdio.bin" "brcmfmac43455-sdio.clm_blob")
FW_WIFI_FILES_4=("brcmfmac43455-sdio.txt" "brcmfmac43455-sdio.bin" "brcmfmac43455-sdio.clm_blob")
FW_BT_URL="https://raw.githubusercontent.com/RPi-Distro/bluez-firmware/master/broadcom/"
FW_BT_FILE_3="BCM43430A1.hcd"
FW_BT_FILE_3P="BCM4345C0.hcd"
FW_BT_FILE_4="BCM-0bb4-0306.hcd"
BRCM_FILE_3="bcm2710-rpi-3-b.dtb"
BRCM_FILE_3P="bcm2710-rpi-3-b-plus.dtb"
BRCM_FILE_4="bcm2711-rpi-4-b.dtb"
KERNEL="https://github.com/raspberrypi/linux"
STAGE3_URL="http://distfiles.gentoo.org/releases"
PORTAGE_URL="http://distfiles.gentoo.org/snapshots"
PORTAGE_FILE="portage-latest.tar.bz2"
ROOT_PW_HASH="\$6\$xxPVR/Td5iP\$/7Asdgq0ux2sgNkklnndcG4g3493kUYfrrdenBXjxBxEsoLneJpDAwOyX/kkpFB4pU5dlhHEyN0SK4eh/WpmO0"
ROOT_PW="raspberry"
CONFIG_FILE="disable_overscan=1\ndtoverlay=vc4-fkms-v3d\nhdmi_drive=2\ndtparam=audio=on\ndtparam=krnbt=on\ngpu_mem=16\narm_64bit=1"
PARTITION_SCHEME="unit: sectors\n\nstart=2048, size=262144, type=c, bootable\nstart=264192, size=4194304, type=82\nstart=4458496, type=83"
FORMAT_ROOT_EXT4="mkfs.ext4 -F -i 8192"
FORMAT_ROOT_F2FS="mkfs.f2fs -f -O extra_attr,inode_checksum,sb_checksum"
ROOT_FS="ext4"
DEPENDS=("git" "sfdisk" "losetup" "blkid" "wget" "gpg" "partprobe" "sync")
RPI_VERSION="3"
WORK_DIR=$(mktemp -d -t bldGenPiImg-XXXXXXXXXX)
WORK_DIR_OLD=""
NBR_CORE=$(($(grep -c processor < /proc/cpuinfo) + 1))
BLOC_SIZE=512
NBR_BLOCS=$((7 * 1024 * 1024 * 1024 / BLOC_SIZE))
MCFLAGS_1="-march=armv6j -mfpu=vfp -mfloat-abi=hard -O2"
MCFLAGS_2="-march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard -O2"
MCFLAGS_3="-march=armv8-a+crc -mtune=cortex-a53 -ftree-vectorize -O2 -pipe -fomit-frame-pointer"
MCFLAGS_4="-march=armv8-a+crc+simd -mtune=cortex-a72 -ftree-vectorize -O2 -pipe -fomit-frame-pointer"
NB_JOBS=4
DEFAULT_POWER_GOV="ONDEMAND"

CHOICE_MADE=false
GET_CONTENT=false
PREPARE=false
BUILDK=false
POPULATE=false
TUNE=false
MOVE_KRN_SRC=false
ADD_PORTAGE=false
MY_CFG_TXT=false
USE_IMG=false
#}}}

function fix_actions #{{{
{
    CHOICE_MADE=true
    OLD_IFS="$IFS"
    IFS=","
    local LIST="$1"
    for ACTION in "${LIST[@]}"; do
        case "$ACTION" in
            "retrieve_files" ) GET_CONTENT=true ;;
            "prepare_card" ) PREPARE=true ;;
            "build_kernel" ) BUILDK=true ;;
            "populate" ) POPULATE=true ;;
            "tune" ) TUNE=true ;;
            "all" ) GET_CONTENT=true
                    PREPARE=true
                    BUILDK=true
                    POPULATE=true
                    TUNE=true ;;
            * ) echo "'$ACTION' is not defined."
                IFS="$OLD_IFS"
                exit 1;;
        esac
    done
    IFS="$OLD_IFS"
} #}}}

function printResult #{{{
{
    if [[ -z "$2" ]]; then local MESSAGE=""; else local MESSAGE="$2"; fi
    if [[ "$1" -ne 0 ]]; then
        echo -e "\e[1;31m[FAIL]\e[0m\n\t$MESSAGE"
        exit 1
    else
        echo -e "\e[1;32m[OK]\e[0m\e[37m"
    fi
    return 0
} #}}}

function announce #{{{
{
    local RESPONSE
    echo -e "We are going to proceed, here is the settings:\n"
    echo -e "* Working directory: \e[1;31m$WORK_DIR\e[0m"
    echo -e "* Device used: \e[1;31m$CARD\e[0m"
    echo -e "* Default root password: \e[1;33m$ROOT_PW\e[0m"
    echo -e "* Kernel version: \e[1;33m$KRN_VERSION\e[0m"
    [[ -n $MY_CFG ]] && echo "* Kernel configuration file used: \e[1;33m$MY_CFG\e[0m"
    [[ "$MY_CFG_TXT" = true ]] && echo "* We use your own config.txt"
    echo -e "* RaspberryPi version: \e[1;33m$RPI_VERSION\e[0m"
    echo -e "* Architecture: \e[1;33m$MYARCH\e[0m"
    echo -e "* Root filesystem: \e[1;33m$ROOT_FS\e[0m"
    echo -e "* Hostname: \e[1;33m$HN\e[0m"
    echo -e "* Timezone: \e[1;33m$TZ\e[0m"
    echo -e "* Keymaps: \e[1;33m$KEYMAPS\e[0m"
    [[ "$ADD_PORTAGE" = true ]] && echo "* Last portage tree will be added"
    echo -e "* Log file: \e[1;33m$LOG\e[0m\n"
    echo -e "You can monitor the process with: \"\e[1;33mtail -f $LOG\e[0m\e[37m\" in a terminal\n"
    echo -n "Are you ok with those settings (y/[n]) ? "
    read -r RESPONSE
    echo
    [[ "$RESPONSE" == "y" ]] ||
        {
            [[ -z "$WORK_DIR_OLD" ]] && rmdir "$WORK_DIR"
            echo "ok, then we stop here."
            exit 0
        }
} #}}}

function flavoured_file #{{{
{
    case $RPI_VERSION in
        "1" )
            [[ -n "$KERNEL_CONFIG" ]] || KERNEL_CONFIG=$KERNEL_CONFIG_1
            ARM_FLAVOUR="$ARM_FLAVOUR_1"
            BRCM_FILE=""
            FW_BT_FILE=""
            KERNEL_FILE="kernel.img"
            MCFLAGS=$MCFLAGS_1
            AARCH="armv6j-linux-gnueabihf" ;;
        "2" )
            [[ -n "$KERNEL_CONFIG" ]] || KERNEL_CONFIG=$KERNEL_CONFIG_2
            BRCM_FILE=""
            ARM_FLAVOUR="$ARM_FLAVOUR_3"
            FW_BT_FILE=""
            KERNEL_FILE="kernel7.img"
            MCFLAGS=$MCFLAGS_2
            AARCH="armv7a-linux-gnueabihf" ;;
        "3" )
            [[ -n "$KERNEL_CONFIG" ]] || 
                {
                    [[ $MODE -eq 64 ]] && 
                        KERNEL_CONFIG=$KERNEL_CONFIG_3 ||
                        KERNEL_CONFIG=$KERNEL_CONFIG_2
                }
            FW_WIFI_FILES=("${FW_WIFI_FILES_3[@]}")
            BRCM_FILE=$BRCM_FILE_3
            FW_BT_FILE=$FW_BT_FILE_3
            if [[ $MODE -eq 64 ]]; then 
                ARM_FLAVOUR="$ARM_FLAVOUR_4"
                KERNEL_FILE="kernel8.img"
                MCFLAGS=$MCFLAGS_3 
                AARCH="aarch64-linux-gnu"
            else
                ARM_FLAVOUR="$ARM_FLAVOUR_3"
                KERNEL_FILE="kernel7.img"
                MCFLAGS=$MCFLAGS_2 
                AARCH="armv7a-linux-gnueabihf"
            fi ;;
        "3P" )
            [[ -n "$KERNEL_CONFIG" ]] || 
                {
                    [[ $MODE -eq 64 ]] && 
                        KERNEL_CONFIG=$KERNEL_CONFIG_3 ||
                        KERNEL_CONFIG=$KERNEL_CONFIG_2
                }
            FW_WIFI_FILES=("${FW_WIFI_FILES_3P[@]}")
            BRCM_FILE=$BRCM_FILE_3P
            FW_BT_FILE=$FW_BT_FILE_3P
            if [[ $MODE -eq 64 ]]; then 
                ARM_FLAVOUR="$ARM_FLAVOUR_4"
                KERNEL_FILE="kernel8.img"
                MCFLAGS=$MCFLAGS_3 
                AARCH="aarch64-linux-gnu"
            else
                ARM_FLAVOUR="$ARM_FLAVOUR_3"
                KERNEL_FILE="kernel7.img"
                MCFLAGS=$MCFLAGS_2 
                AARCH="armv7a-linux-gnueabihf"
            fi ;;
        "4" )
            [[ -n "$KERNEL_CONFIG" ]] || KERNEL_CONFIG=$KERNEL_CONFIG_4
            BRCM_FILE=$BRCM_FILE_4
            FW_WIFI_FILES=("${FW_WIFI_FILES_4[@]}")
            FW_BT_FILE=$FW_BT_FILE_4
            if [[ $MODE -eq 64 ]]; then 
                ARM_FLAVOUR="$ARM_FLAVOUR_4"
                KERNEL_FILE="kernel8.img"
                MCFLAGS=$MCFLAGS_4 
                AARCH="aarch64-linux-gnu"
            else
                KERNEL_FILE="kernel7l.img"
                MCFLAGS=$MCFLAGS_4 
                AARCH="armv7a-linux-gnueabihf"
            fi ;;
    esac
    [[ $MODE -eq 64 ]] && MYARCH="arm64" || MYARCH="arm"
} #}}}

function test_requirements #{{{
{
    echo "* Checking requirements:"
    for REQ in "${DEPENDS[@]}"; do
        echo -en "\t- $REQ: "
        which "$REQ" >> "$LOG" 2>&1
        printResult $? "You need to install $REQ."
    done
    echo -en "\t- Gentoo public key: "
    [[ $(gpg --list-key "$GLRE_KEY" >> "$LOG" 2>&1) ]] || 
        gpg --keyserver "$KEY_SERVER" --recv-keys "$GLRE_KEY" >> "$LOG" 2>&1
    printResult $? "You need to install the key: $GLRE_KEY."
    if [[ "$USE_IMG" = false ]]; then
        echo -en "\t- Media inserted: "
        test -b "$CARD"
        printResult $? "You will need an sdcard inserted."
        echo -en "\t- Media not mounted: "
        [[ $(mount | grep -c "${CARD}") -eq 0 ]]
        printResult $? "${CARD} already mounted."
    fi
    echo -en "\t- Cross compilation tools: "
    which "${AARCH}-gcc" >> "$LOG" 2>&1
    printResult $?  "You need to install the $AARCH compiler."
    echo -en "\t- Root permissions: "
    [[ $(id -u) -eq 0 ]]
    printResult $? "You need to be root."
} #}}}

function prepare_card #{{{
{
    local FILE
    local PART
    echo "* Preparing card:"
    if [[ "$USE_IMG" = true ]]; then
        echo -ne "\t- Creating the virtual disk: "
        FILE="$WORK_DIR/${IMG_PREFIX}_${RPI_VERSION}.img"
        dd if=/dev/zero of="$FILE" bs="$BLOC_SIZE" count="$NBR_BLOCS" >> "$LOG" 2>&1 ||
            printResult 1 "File creation failed !"
        losetup -fP "$FILE" >> "$LOG" 2>&1
        printResult $? "Volume creation failed !"
        CARD=$(losetup --list | grep "$FILE" | cut -f 1 -d ' ')
    fi
    echo -ne "\t- Partitioning: "
    sfdisk "$CARD" >> "$LOG" 2>&1 <<EOF
    $(echo -e "$PARTITION_SCHEME")
EOF
    printResult $? "Partitioning $CARD failed !"
    if [[ "$CARD" =~ "mmcblk" || "$CARD" =~ "loop" ]]; then
        PART="${CARD}p"
    else
        PART="$CARD"
    fi
    echo -ne "\t- Reloading partition table: "
    partprobe >> "$LOG" 2>&1
    printResult $? "Reloading failed !"
    echo -ne "\t- Formating boot (vfat): "
    mkfs.vfat -F 32 "${PART}"1 >> "$LOG" 2>&1
    printResult $? "vfat formating failed !"
    echo -ne "\t- Formating root ($ROOT_FS): "
    $FORMAT_ROOT "${PART}"3 >> "$LOG" 2>&1
    printResult $? "$ROOT_FS formating failed !"
    echo -ne "\t- Making swap: "
    mkswap "${PART}2"  >> "$LOG" 2>&1
    printResult $? "Swap formating failed !"
} #}}}

function mount_root #{{{
{
    local PART
    echo "* Mounting partitions:"
    echo -ne "\t- root: "
    if [[ "$CARD" =~ "mmcblk" || "$CARD" =~ "loop" ]]; then
        PART="${CARD}p"
    else
        PART="$CARD"
    fi
    [[ -d "$WORK_DIR/$ROOT" ]] ||
        {
            mkdir "$WORK_DIR/$ROOT" >> "$LOG" 2>&1 ||
                printResult 1 "Mounting the root partition failed !"
        }
    mount "${PART}3" "$WORK_DIR/$ROOT" >> "$LOG" 2>&1
    printResult $? "Mounting the root partition failed !"
    echo -ne "\t- boot: "
    [[ -d "$WORK_DIR/$ROOT/boot" ]] ||
        {
            mkdir "$WORK_DIR/$ROOT/boot" >> "$LOG" 2>&1 ||
                printResult 1 "Mounting the boot partition failed !"
        }
    mount "${PART}1" "$WORK_DIR/$ROOT/boot" >> "$LOG" 2>&1
    printResult $? "Mounting the boot partition failed !"
} #}}}

function get_contents #{{{
{
    local FLAVOUR
    local REMOTE
    local LOCAL
    local FILE_HASH
    echo "* Getting the contents:"
    #{{{ Retrieving firmware
    echo -en "\t- Firmware: "
    if [[ -d "$WORK_DIR/firmware" ]]; then
        (
            cd "$WORK_DIR/firmware" >> "$LOG" 2>&1 ||
                printResult 1 "Updating firmware failed !"
            [[ $(git pull >> "$LOG" 2>&1) -eq 0 ]] || 
                printResult 1 "Updating firmware failed !"
        )
    else
        (
            cd "$WORK_DIR" >> "$LOG" 2>&1 ||
                printResult 1 "Getting firmware failed !"
            [[ $(git clone -b stable --depth=1 "$FW_URL" >> "$LOG" 2>&1) -eq 0 ]] ||
                printResult 1 "Getting firmware failed !"
        )
    fi
    echo -e "\e[1;32m[OK]\e[0m\e[37m"
    #}}}
    #{{{ Retrieving stage 3
    echo -en "\t- Stage 3: "
    REMOTE="$STAGE3_URL/$MYARCH/autobuilds/latest-stage3-$ARM_FLAVOUR.txt"
    LOCAL="$WORK_DIR/latest-stage3-$MYARCH.txt"
    [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] || 
        printResult 1 "Retrieving last flavour id failed !"
    FLAVOUR=$(grep -v "^#" < "$WORK_DIR/latest-stage3-$MYARCH.txt" | cut -d " " -f 1)
    REMOTE="$STAGE3_URL/$MYARCH/autobuilds/$FLAVOUR.DIGESTS.asc"
    LOCAL="$WORK_DIR/${FLAVOUR#*/}.DIGESTS.asc"
    [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] || 
        printResult 1 "Retrieving stage 3 signature failed !"
    LOCAL="$WORK_DIR/${FLAVOUR#*/}"
    REMOTE="$STAGE3_URL/$MYARCH/autobuilds/$FLAVOUR"
    if [[ -f "$LOCAL" ]]; then
        FILE_HASH=$(sha512sum "$LOCAL" | cut -d " " -f 1)
        if [[ $(grep -c "$FILE_HASH" < "$LOCAL.DIGESTS.asc") -eq 0 ]]; then
            [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] || 
                printResult 1 "Retrieving stage 3 failed !"
            FILE_HASH=$(sha512sum "$LOCAL" | cut -d " " -f 1)
            [[ $(grep -c "$FILE_HASH" < "$LOCAL.DIGESTS.asc") -gt 0 ]] ||
                printResult 1 "The file sha512sum don't match."
        fi
    else
        
        [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] || 
            printResult 1 "Retrieving stage 3 failed !"
        FILE_HASH=$(sha512sum "$LOCAL" | cut -d " " -f 1)
        [[ $(grep -c "$FILE_HASH" < "$LOCAL.DIGESTS.asc") -gt 0 ]] ||
            printResult 1 "The file sha512sum don't match."
    fi
    echo -e "\e[1;32m[OK]\e[0m\e[37m"
    #}}}
    #{{{ Retrieving portage tree
    if [[ "$ADD_PORTAGE" = true ]]; then
        echo -en "\t- Portage: "
        LOCAL="$WORK_DIR/$PORTAGE_FILE"
        REMOTE="$PORTAGE_URL/$PORTAGE_FILE"
        [[ $(wget "$REMOTE.gpgsig" -O "$LOCAL.asc" >> "$LOG" 2>&1) -eq 0 ]] ||
            printResult 1 "Retrieving portage tree signature failed !"
        if [[ -f "$LOCAL" ]]; then
            if [[ $(gpg --verify "$LOCAL.asc" >> "$LOG" 2>&1) -gt 0 ]]; then
                [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
                    printResult 1 "Retrieving portage tree failed !"
                [[ $(gpg --verify "$LOCAL.asc" >> "$LOG" 2>&1) -eq 0 ]] ||
                    printResult 1 "portage signature don't match !"
            fi
        else
            [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
                printResult 1 "Retrieving portage tree failed !"
            [[ $(gpg --verify "$LOCAL.asc" >> "$LOG" 2>&1) -eq 0 ]] ||
                printResult 1 "portage signature don't match !"
        fi
        echo -e "\e[1;32m[OK]\e[0m\e[37m"
    fi
    #}}}
    #{{{ Retrieving the kernel
    echo -en "\t- Kernel: "
    if [[ -d "$WORK_DIR/linux" ]]; then
        (
            cd "$WORK_DIR/linux" >> "$LOG" 2>&1 ||
                printResult 1 "Updating kernel failed !"
            [[ $(git pull >> "$LOG" 2>&1) -eq 0 ]] || 
                printResult 1 "Updating kernel failed !"
        )
    else
        (
            local RES
            cd "$WORK_DIR" >> "$LOG" 2>&1 ||
                printResult 1 "Getting kernel version $KRN_VERSION failed !"
            RES=$(git clone -b "$KRN_VERSION" --depth=1 "$KERNEL" >> "$LOG" 2>&1)
            [[ $RES -eq 0 ]] || 
                printResult 1 "Getting kernel version $KRN_VERSION failed !"
        )
    fi
    echo -e "\e[1;32m[OK]\e[0m\e[37m"
    #}}}
    #{{{ Retrieving firmwares
    echo -en "\t- Wifi firmware: "
    LOCAL="$WORK_DIR/${FW_WIFI_FILES[0]}"
    REMOTE="$FW_WIFI_URL/${FW_WIFI_FILES[0]}"
    if ! [[ -f "$LOCAL" ]]; then
        [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
            printResult 1 "Retrieving ${FW_WIFI_FILES[0]} failed !"
    fi
    LOCAL="$WORK_DIR/$FW_WIFI_ARCH_DEB_FILE"
    REMOTE="$FW_WIFI_ARCH_DEB_URL/$FW_WIFI_ARCH_DEB_FILE"
    if ! [[ -f "$LOCAL" ]]; then
        [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
            printResult 1 "Retrieving $FW_WIFI_ARCH_DEB_FILE failed !"
    fi
    if ! [[ -f "$WORK_DIR/${FW_WIFI_FILES[1]}" ]] || 
                ! [[ -f "$WORK_DIR/${FW_WIFI_FILES[2]}" ]]; then
        local TARGET
        ar --output "$WORK_DIR" x "$LOCAL" data.tar.xz >> "$LOG" 2>&1 ||
            printResult 1 "Extracting archives from deb file failed !"
        TARGET="./lib/firmware/brcm/${FW_WIFI_FILES[1]}"
        tar xJf "$WORK_DIR/data.tar.xz" --strip-components 4 -C "$WORK_DIR" "$TARGET" \
            2>> "$LOG" || printResult 1 "Extracting ${FW_WIFI_FILES[1]} failed !"
        TARGET="./lib/firmware/brcm/${FW_WIFI_FILES[2]}"
        tar xJf "$WORK_DIR/data.tar.xz" --strip-components 4 -C "$WORK_DIR" "$TARGET" \
                2>> "$LOG" || printResult 1 "Extracting ${FW_WIFI_FILES[2]} failed !"
        rm "$WORK_DIR/data.tar.xz"
    fi
    echo -e "\e[1;32m[OK]\e[0m\e[37m"
    echo -en "\t- Bluetooth firmware: "
    LOCAL="$WORK_DIR/$FW_BT_FILE"
    REMOTE="$FW_BT_URL/$FW_BT_FILE"
    if ! [[ -f "$LOCAL" ]]; then
        [[ $(wget "$REMOTE" -O "$LOCAL" >> "$LOG" 2>&1) -eq 0 ]] ||
            printResult 1 "Retrieving $FW_BT_FILE failed !"
        fi
    echo -e "\e[1;32m[OK]\e[0m\e[37m"
    #}}}
} #}}}

function build_kernel #{{{
{
    echo "* Building kernel: "
    (
        cd "$WORK_DIR/linux" >> "$LOG" 2>&1 ||
            printResult 1 "Unable to go to the linux directory."
        echo -ne "\t- Configuring: "
        if [[ "$KERNEL_CONFIG" = "olddefconfig" ]]; then
            mv {../,}.config >> "$LOG" 2>&1 ||
                printResult 1 "Unable to copy your config file."
        fi
        ARCH="$MYARCH" CROSS_COMPILE="$AARCH-" make "$KERNEL_CONFIG" >> "$LOG" 2>&1 ||
            printResult 1 "Kernel configuration failed !"
        if [[ "$KERNEL_CONFIG" != "olddefconfig" ]]; then
            sed -i '/^CONFIG_\(B43\|SSB_BLOCKIO\|BCMA_BLOCKIO\).*$/d' .config
            echo -e "# CONFIG_B43 is not set\n# CONFIG_B43LEGACY is not set" >> .config
            sed -i -E 's/^(CONFIG_CPU_FREQ_DEFAULT_GOV[A-Z_]*)=.*$/# \1 is not set/g' .config
            sed -i -E "s/^# (CONFIG_CPU_FREQ_DEFAULT_GOV_$DEFAULT_POWER_GOV) is not set/\1=y/" .config
        fi
        echo -e "\e[1;32m[OK]\e[0m\e[37m"
        echo -ne "\t- Building: "
        ARCH="$MYARCH" CROSS_COMPILE="$AARCH-" make -j$NBR_CORE >> "$LOG" 2>&1
        printResult $? "Kernel compilation failed !"
    )
} #}}}

function populate #{{{
{
    local KRN_RELEASE
    local RES
    local BRD_DIR
    [[ $MODE -eq 32 ]] && BRD_DIR="" || BRD_DIR="broadcom/"
    echo "* Populating the root: "
    # stage 3
    echo -ne "\t- Installing stage 3: "
    FLAVOUR=$(grep -v "^#" < "$WORK_DIR/latest-stage3-$MYARCH.txt" | cut -d " " -f 1)
    tar xpf "$WORK_DIR/${FLAVOUR#*/}" --xattrs-include='*.*' \
                    --numeric-owner -C "$WORK_DIR/$ROOT" >> "$LOG" 2>&1
    printResult $? "Extracting stage 3 failed !"
    # Portage
    if [[ "$ADD_PORTAGE" = true ]]; then
        echo -ne "\t- Installing portage tree: "
        mkdir -p "$WORK_DIR/$ROOT/var/db/repos/gentoo" ||
            printResult 1 "Unable to create local gentoo repos !"
        tar xpf "$WORK_DIR/$PORTAGE_FILE" --strip-components=1 \
                    -C "$WORK_DIR/$ROOT/var/db/repos/gentoo" >> "$LOG" 2>&1
        printResult $? "Extracting portage failed !"
    fi
    #{{{ Firmwares
    echo -ne "\t- Installing firmwares: "
    cp -r "$WORK_DIR"/{firmware/boot/*,"$ROOT"/boot} >> "$LOG" 2>&1
    printResult $? "Installing firmware failed !"
    echo -ne "\t- Adding wifi firmware: "
    [[ -d "$WORK_DIR/$ROOT/lib/firmware/brcm" ]] || 
        {
            mkdir -p "$WORK_DIR/$ROOT/lib/firmware/brcm" ||
                printResult 1 "Unable to make the directory"
        }
    for FILE in "${FW_WIFI_FILES[@]}"; do
        RES=$(cp "$WORK_DIR"/{"$FILE","$ROOT/lib/firmware/brcm/"} >> "$LOG" 2>&1)
        [[ "$RES" -eq 0 ]] || 
            printResult 1 "Installing $FILE failed !"
    done
    echo -e "\e[1;32m[OK]\e[0m\e[37m"
    echo -ne "\t- Adding bluetooth firmware: "
    cp "$WORK_DIR"/{"$FW_BT_FILE","$ROOT/lib/firmware/brcm/"} >> "$LOG" 2>&1
    printResult $? "Installing $FW_BT_FILE failed !"
    echo -ne "\t- Installing broadcom 64bit driver: "
    [[ $MODE -eq 64 ]] &&
        mv "$WORK_DIR/$ROOT/boot/$BRCM_FILE"{,_32} >> "$LOG" 2>&1
    cp "$WORK_DIR/"{"linux/arch/$MYARCH/boot/dts/${BRD_DIR}$BRCM_FILE","$ROOT/boot"} \
                >> "$LOG" 2>&1
    printResult $? "Installing brcm 64bit drivers failed !"
    #}}}
    #{{{ Kernel
    echo -ne "\t- Installing kernel: "
    cp "$WORK_DIR/"{"linux/arch/$MYARCH/boot/Image","$ROOT/boot/$KERNEL_FILE"} \
                >> "$LOG" 2>&1
    printResult $? "Installing kernel failed !"
    echo -ne "\t- Installing kernel modules: "
    (
        cd "$WORK_DIR/linux" >> "$LOG" 2>&1 ||
            printResult 1 "Unable to reach de kernel sources directory"
        ARCH="$MYARCH" CROSS_COMPILE="$AARCH-" make modules_install \
                        INSTALL_MOD_PATH="$WORK_DIR/$ROOT" >> "$LOG" 2>&1
        printResult $? "Installing kernel modules failed !"
    )
    KRN_RELEASE=$(cat "$WORK_DIR/linux/include/config/kernel.release")
    echo -ne "\t- Correcting sources symbolic links in modules directory: "
    rm "$WORK_DIR/$ROOT/lib/modules/$KRN_RELEASE"/{build,source} >> "$LOG" 2>&1 ||
        printResult 1 "Removing symbolic links failed !"
    ln -s /usr/src/linux "$WORK_DIR/$ROOT/lib/modules/$KRN_RELEASE/build" >> "$LOG" 2>&1 ||
        printResult 1 "Unable to create build symbolic link !"
    ln -s /usr/src/linux "$WORK_DIR/$ROOT/lib/modules/$KRN_RELEASE/source" >> "$LOG" 2>&1
    printResult $? "Unable to create source symbolic link !"
    echo -ne "\t- Creating kernel source directory: "
    mkdir "$WORK_DIR/$ROOT/usr/src/$KRN_RELEASE" >> "$LOG" 2>&1 ||
        printResult 1 "Creating kernel source directory failed !"
    ln -s "$KRN_RELEASE" "$WORK_DIR/$ROOT/usr/src/linux" >> "$LOG" 2>&1
    printResult $? "Creating linux directory symbolic link failed !"
    echo -ne "\t- Installing kernel config and Makefile: "
    cp "$WORK_DIR"/{linux/{.config,Makefile},"$ROOT/usr/src/$KRN_RELEASE/"} >> "$LOG" 2>&1
    printResult $? "Copying files failed !"
    if [[ "$MOVE_KRN_SRC" = true ]]; then
        echo -ne "\t- Installing kernel sources: "
        (
            cd "$WORK_DIR/linux" >> "$LOG" 2>&1 ||
                printResult 1 "Unable to reach the kernel source directory"
            ARCH="$MYARCH" CROSS_COMPILE="$AARCH-" make distclean >> "$LOG" 2>&1
            cp -R ./* "$WORK_DIR/$ROOT/usr/src/$KRN_RELEASE/" >> "$LOG" 2>&1
            printResult $? "Copying sources failed !"
        )
    fi
    #}}}
} #}}}

function fstab_builder #{{{
{
    for INDEX in $1; do
        blkid "$INDEX" | 
            sed -E 's/((PART)?UUID|BLOCK_SIZE)="[^"]*"//g' | 
            sed -E 's/:( )*|"/\t/g' | 
            sed 's/TYPE=//g' | 
            sed -E 's/(swap)/none\t\1\tsw\t0 0/' | 
            sed -E 's/(vfat)/\/boot\t\1\tnoauto,noatime\t1 2/' | 
            sed -E 's/(ext.?)/\/\t\1\tnoatime\t0 0/' | 
            sed -E 's/(f2fs)/\/\t\1\trw\t0 0/' | 
            sed -E 's/^\/dev\/[[:alnum:]]*([[:digit:]])(.*)$/\/dev\/mmcblk0p\1\2/g'
    done
    return 0
} #}}}

function tune #{{{
{
    echo "* Tuning system: "
    # fstab
    FSTAB=$(sfdisk -l "$CARD" -o Device | grep "^$CARD")
    echo -ne "\t- Tuning fstab: "
    fstab_builder "$FSTAB" > "$WORK_DIR/$ROOT/etc/fstab"
    printResult $? "fstab tuning failed !"
    echo -ne "\t- Fixing root password: "
    sed -i "s|root:\*:|root:$ROOT_PW_HASH:|" "$WORK_DIR/$ROOT/etc/shadow"
    printResult $? "Fixing root password failed !"
    echo -ne "\t- Tuning inittab: "
    sed -E -i "s|^(f0:12345.*)$|#\1|" "$WORK_DIR/$ROOT/etc/inittab" >> "$LOG" 2>&1
    printResult $? "Preventing serial console allotment failed !"
    echo -ne "\t- Tuning config.txt: "
    if [[ "$MY_CFG_TXT" = true ]]; then
        cp "$CONFIG_FILE" "$WORK_DIR/$ROOT/boot/config.txt" 2>> "$LOG"
        printResult $? "Config file installing failed !"
    else
        echo -e "$CONFIG_FILE" > "$WORK_DIR/$ROOT/boot/config.txt" 2>> "$LOG"
        printResult $? "Config file installing failed !"
    fi
    
    echo -ne "\t- Tuning cmdline.txt: "
    sed -E "s/\s+/ /g" < "$WORK_DIR/$ROOT/etc/fstab" | cut -d ' ' -f 1,2,3 | grep "/ " | 
        sed -E 's/([^ ]*) ([^ ]*) ([^ ]*)/root=\1 rootfstype=\3 rootwait/' > "$WORK_DIR/$ROOT/boot/cmdline.txt"
    printResult $? "cmdline.txt file installing failed !"
    echo -ne "\t- Tuning make.conf: "
    sed -E -i "s|^(CFLAGS.*)$|CFLAGS=\"$MCFLAGS\"\nMAKEOPTS=\"-j$NB_JOBS\"|" "$WORK_DIR/$ROOT/etc/portage/make.conf" >> "$LOG" 2>&1
    printResult $? "Fixing CFLAGS and MAKEOPTS failed !"
    echo -ne "\t- Fixing Timezone: "
    echo "$TZ" > "$WORK_DIR/$ROOT/etc/timezone" 2>> "$LOG"
    (
        cd "$WORK_DIR/$ROOT" >> "$LOG" 2>&1 ||
            printResult 1 "Switching to \"$WORK_DIR/$ROOT\" failed"
        ln -sf /usr/share/zoneinfo/$TZ ./etc/localtime >> "$LOG" 2>&1
        printResult $? "Fixing timezone failed !"
    )
    echo -ne "\t- Fixing Keymap: "
    echo "keymap=\"$KEYMAPS\"" > "$WORK_DIR/$ROOT/etc/conf.d/keymaps" 2>> "$LOG"
    printResult $? "Fixing keymap failed !"
    echo -ne "\t- Fixing Hostname: "
    echo "hostname=\"$HN\"" > "$WORK_DIR/$ROOT/etc/conf.d/hostname" 2>> "$LOG"
    printResult $? "Fixing hostname failed !"
    echo -ne "\t- Fixing Network (eth0): "
    echo "config_eth0=\"dhcp\"" > "$WORK_DIR/$ROOT/etc/conf.d/net" 2>> "$LOG"
    (
        cd "$WORK_DIR/$ROOT/etc/init.d" >> "$LOG" 2>&1 || 
            printResult 1 "Switching to \"$WORK_DIR/$ROOT/etc/init.d\" failed"
        ln -s ./net.{lo,eth0} >> "$LOG" 2>&1
        printResult $? "Linking network init script failed !"
    )
    echo -ne "\t- Fixing Network (wlan0): "
    echo "config_wlan0=\"dhcp\"" >> "$WORK_DIR/$ROOT/etc/conf.d/net" 2>> "$LOG"
    (
        cd "$WORK_DIR/$ROOT/etc/init.d" >> "$LOG" 2>&1 || 
            printResult 1 "Switching to \"$WORK_DIR/$ROOT/etc/init.d\" failed"
        ln -s ./net.{lo,wlan0} >> "$LOG" 2>&1
        printResult $? "Linking network init script failed !"
    )
    echo -ne "\t- Fixing Time: "
    [[ -f "$WORK_DIR/root/etc/runlevels/boot/hwclock" ]] && 
        {
            rm "$WORK_DIR/root/etc/runlevels/boot/hwclock" >> "$LOG" 2>&1 ||
                printResult 1 "Disabling hwclock service failed !"
        }
    (
        cd "$WORK_DIR/$ROOT" >> "$LOG" 2>&1 ||
            printResult 1 "Switching to \"$WORK_DIR/$ROOT\" failed"
        ln -s /etc/init.d/swclock ./etc/runlevels/boot/. ||
            printResult 1 "Enabling swclock service failed !"
        ln -s /etc/init.d/busybox-ntpd ./etc/runlevels/default/.
        printResult $? "Enabling busybox-ntpd service failed !"
    )
} #}}}

function clean #{{{
{
    echo "* Cleaning system: "
    echo -ne "\t- Syncing filesystem: "
    sync >> "$LOG" 2>&1
    printResult $? "Syncing failed !"
    echo -ne "\t- Unmounting $CARD: "
    [[ 0 -eq $(mount | grep -c "$CARD") ]] || 
                umount "$WORK_DIR"/root/{boot,} >> "$LOG" 2>&1
    printResult $? "Unmounting $CARD failed !"
    [[ "$USE_IMG" = true ]] && 
        {
            echo -ne "\t- Destroying the virtual device $CARD: "
            losetup -d "$CARD"
            printResult $? "Destroying $CARD failed !"
        }
    #rm -rf "$WORK_DIR"
} #}}}

function show_help #{{{
{
    echo -e "usage: ${0#*/} <options>
Option's list:
\t-h\t\tDisplay this help message\n
\t-b <type>\tType of the board:
\t\t\t3 for raspberryPi (3 B)
\t\t\t3P for raspberryPi (3 B+)
\t\t\t4 for raspberryPi (4 B)
\t\t\tActual value is $RPI_VERSION\n
\t-m <dir>\tSet the mount point for the disk
\t\t\tActual value is a temporary directory\n
\t-B <branch>\tInstall a specific kernel branch (from rPi kernel github repository)
\t\t\tActual value is the latest official branch\n
\t-d <device>\tDevice to use for install:
\t\t\tActual value is $CARD\n
\t-k <lang>\tLang for the keymaps
\t\t\tActual value is \"$KEYMAPS\"\n
\t-c <file>\tUse your own kernel config file
\t\t\tYou need to use the absolute path\n
\t-H <hostname>\tFix the hostname
\t\t\tActual value is \"$HN\"\n
\t-t <timezone>\tFix the timezone
\t\t\tActual value is \"$TZ\"\n
\t-f <filesystem>\tFilesystem for the root partition:
\t\t\tf2fs, ext4
\t\t\tActual value is $ROOT_FS\n
\t-a <actions>\tActions to perform \e[1;33m[Actually, for testing purpose]\e[1;0m
\t\t\tYou can pick the actions in the following list:
\t\t\t(all, retrieve_files, prepare_card, build_kernel, populate, tune)
\t\t\tActual value is \"all\"\n
\t-C <file>\tUse your own config.txt file
\t\t\tYou need to use the absolute path\n
\t-M <size>\tMode: 32 or 64 bits
\t\t\tThis apply only on rPi 3, 3P and 4
\t\t\tActual value: $MODE\n
\t-s\t\tCopy the kernel sources on the card,
\t\t\tBeware that this will run make distclean on the actual sources
\t\t\tActual value is \"$MOVE_KRN_SRC\"\n
\t-p\t\tCopy the portage tree,
\t\t\tActual value is \"$ADD_PORTAGE\"\n
\t-i\t\tBuild an image instead of writing directly on the media\n
After the first boot, follow those steps:\n
\t* busybox udhcpc -i eth0
\t* rc-service busybox-ntpd restart
\t* emerge --sync
\t* perl-cleaner --all
\t* emerge -vauD --newuse @world
\t* emerge -a --depclean
\t* emerge -vaD dhcpcd
\t* emerge -vaD wpa_supplicant # If you want to use wifi
\t* shutdown -r now
"
} #}}}

# Retrieve the last kernel version
KRN_VERSION=$(git ls-remote "$KERNEL" | grep -v "pull\|patch" | grep head | 
            cut -d '/' -f 3 | grep "^rpi-[0-9].*y$" | sort -rV | head -n 1)

while getopts "hb:m:B:d:k:c:H:t:f:a:C:M:spi" OPTION; do #{{{
    case $OPTION in
        h ) show_help && exit 0 ;;
        b ) RPI_VERSION="$OPTARG" ;;
        m ) WORK_DIR_OLD="$WORK_DIR"
            [[ -d "$WORK_DIR" ]] && rmdir "$WORK_DIR"
            WORK_DIR="${OPTARG%/}" ;;
        B ) KRN_VERSION="$OPTARG" ;;
        d ) CARD="$OPTARG" ;;
        k ) KEYMAPS="$OPTARG" ;;
        c ) [[ -f "$OPTARG" ]] ||
                {
                    echo "$OPTARG is not a file."
                    exit 1
                }
            MY_CFG="$OPTARG"
            cp "$OPTARG" "$WORK_DIR/.config" ||
                {
                    echo "Unable to move $OPTARG to $WORK_DIR."
                    exit 1
                }
            KERNEL_CONFIG="olddefconfig" ;;
        H ) HN="$OPTARG" ;;
        t ) TZ="$OPTARG" ;;
        f ) ROOT_FS="$OPTARG" ;;
        a ) fix_actions "$OPTARG" ;;
        C ) [[ -f "$OPTARG" ]] ||
                {
                    echo "$OPTARG is not a file."
                    exit 1
                }
            MY_CFG_TXT=true
            CONFIG_FILE="$OPTARG" ;;
        M ) [[ $OPTARG -ne 32 && $OPTARG -ne 64 ]] &&
                {
                    echo "-S allowed values are: 32 and 64."
                    exit 1
                }
            MODE=$OPTARG ;;
        s ) MOVE_KRN_SRC=true ;;
        p ) ADD_PORTAGE=true ;;
        i ) USE_IMG=true
            CARD=loopback ;;
        * ) show_help && exit 1 ;;
    esac
done #}}}

LOG="$WORK_DIR"/builder.log

[[ "$ROOT_FS" = "f2fs" ]] && 
    FORMAT_ROOT="$FORMAT_ROOT_F2FS" || 
    FORMAT_ROOT="$FORMAT_ROOT_EXT4"

$CHOICE_MADE || fix_actions all
announce
flavoured_file
test_requirements
$GET_CONTENT && get_contents
$BUILDK && build_kernel
$PREPARE && prepare_card
( $POPULATE || $TUNE ) && mount_root
$POPULATE && populate
$TUNE && tune
clean
exit 0
