#!/bin/bash
# vim: foldmarker={{{,}}}
#
# kernelbuilder
# Author: Alexandre Keledjian <dervishe@yahoo.fr>
# Version: 1.0
# License: GPLv3
#
#
# This script build the kernel image for the raspberryPi
#

#{{{ Parameters
KERNEL_SOURCES=git://github.com/raspberrypi/linux.git
FBTFT_SOURCES=git://github.com/notro/fbtft.git
ROOT_PATH=""
TARGET=/usr/bin/armv6j-hardfloat-linux-gnueabi-
WDIR=./repository_alt
CONFIG_FILE=""
RASP_TYPE=1
KEEP_FILES=0
NO_FBTFT=0
#}}}
#{{{ Library
function show_help() #{{{
{
	echo "
usage: $0 -b board_type -m mount_point <options>

Option's list:

	-b <type>			Type of the board: [Mandatory]
					1/ for raspberryPi (1 A A+ B B+ and zero) and 
					2/ for raspberryPi (2 A and B)
					Default type is 1
	-m <dir>			Set the mount point for the disk (./mnt) [Mandatory]
	-c <file>			Use your own .config file to compile the kernel. Here, you MUST use absolute path to the file
	-h : --help			Display this help message
	-k : --keep-files		Keep all the files retrieved (archives, hash, signature, etc)
	-w : --without-fbtft		Don't include the Notro fbtft drivers
"
} #}}}
#}}}
. ./helpers

#{{{ Parameters analyzis
while getopts "hkwb:m:c:-:" option; do
	case $option in
		h ) show_help && exit 0 ;;
		k ) KEEP_FILES=1;;
		w ) NO_FBTFT=1;;
		b ) RASP_TYPE=$OPTARG
			if ! [[ $RASP_TYPE -eq 1 ]] && ! [[ $RASP_TYPE -eq 2 ]]; then
				echo "Bad RaspBerry type: $RASP_TYPE"
				show_help
				exit 1
			fi;;
		m ) ROOT_PATH=$OPTARG
			if ! [[ -d $ROOT_PATH ]]; then
				echo "$ROOT_PATH doesn't exist."
				show_help
				exit 1
			fi;;
		c ) CONFIG_FILE=$OPTARG
			if ! [[ -f $CONFIG_FILE ]]; then
				echo "$CONFIG_FILE doesn't exist."
				show_help
				exit 1
			fi;;
		- ) case $OPTARG in
				help ) show_help && exit 0 ;;
				keep-files ) KEEP_FILES=1;;
				without-fbtft ) NO_FBTFT=1;;
				* ) echo "Unknown option: ${OPTARG}"
					show_help
					exit -1 ;;
			esac ;;
		? ) echo "Unknown option: ${OPTARG}"
			show_help
			exit -1 ;;
	esac
done
#}}}
if [[ $ROOT_PATH = "" ]]; then
	echo "You didn't provide the mount point for the disk"
	show_help
	exit 1
fi
echo -e "\t$HSTAR Checking requirements (1/9): " #{{{
echo -en "\t\t$HSTAR Are you root ? "
checkRoot
echo -en "\t\t$HSTAR Are you connected ? "
checkConnectivity
echo -en "\t\t$HSTAR Is your crossdev env installed ? "
checkCrossdev $TARGET
echo -en "\t\t$HSTAR Kernel building tools installed ? "
checkKBT
#}}}

echo -en "\t$HSTAR Building working dir (2/9): " #{{{
([[ -d $WDIR ]] || mkdir "$WDIR") && cd "$WDIR" >> $LOG 2>&1
printResult $?
#}}}

echo -en "\t$HSTAR Retrieving the kernel source (3/9): " #{{{
[[ -d ./linux ]] || git clone --depth 1 $KERNEL_SOURCES >> $LOG 2>&1
printResult $?
#}}}

if [[ $NO_FBTFT -eq 0 ]]; then
	echo -en "\t$HSTAR Retrieving the notro fbtft source (4/9): " #{{{
	cd ./linux/drivers/video/fbdev >> $LOG 2>&1
	if ! [[ -d fbtft ]]; then
		git clone $FBTFT_SOURCES >> $LOG 2>&1
		echo "source \"drivers/video/fbdev/fbtft/Kconfig\"" >> ./Kconfig
		echo "obj-y += fbtft/" >> ./Makefile
		printResult $?
	else
		printResult 0
	fi
	cd - >> $LOG 2>&1
	#}}}
fi

echo -e "\t$HSTAR Compiling the kernel (You can take a coffee now) (5/9): " #{{{
cd ./linux >> $LOG 2>&1
if [[ $CONFIG_FILE = "" ]]; then
	echo -en "\t\t$HSTAR Configure BCM chip: "
	if [[ $RASP_TYPE -eq 1 ]]; then
		make ARCH=arm bcmrpi_defconfig >> $LOG 2>&1
	elif [[ $RASP_TYPE -eq 2 ]]; then
		make ARCH=arm bcm2709_defconfig >> $LOG 2>&1
	fi
	printResult $?
else
	echo -en "\t\t$HSTAR Using your config file: "
	cp -v $CONFIG_FILE . >> $LOG 2>&1
	printResult $?
fi

echo -en "\t\t$HSTAR Configuring the kernel: "
make ARCH=arm CROSS_COMPILE=$TARGET oldconfig >> $LOG 2>&1
printResult $?

echo -en "\t\t$HSTAR Compiling the kernel: "
NB_CORE=$(cat /proc/cpuinfo | grep processor | wc -l);
make ARCH=arm CROSS_COMPILE=$TARGET -j$(( $NB_CORE + 1 )) -l$NB_CORE >> $LOG 2>&1
printResult $?
#}}}

echo -en "\t$HSTAR Installing the modules (6/9): " #{{{
make ARCH=arm CROSS_COMPILE=$TARGET modules_install INSTALL_MOD_PATH=$ROOT_PATH >> $LOG 2>&1
BUFFER=$?
printResult $BUFFER
[[ $BUFFER -eq 1 ]] && exit 1
# Adjusting the symbolic link
KERN_VERSION=$(cat .config | grep Linux | cut -d ' ' -f 3)
cd ${ROOT_PATH}/lib/modules/${KERN_VERSION}* >> $LOG 2>&1
rm ./build ./source >> $LOG 2>&1
ln -s /usr/src/linux ./build >> $LOG 2>&1
ln -s /usr/src/linux ./source >> $LOG 2>&1
cd - >> $LOG 2>&1
#}}}

echo -en "\t$HSTAR Installing the kernel (7/9): " #{{{
if [[ $RASP_TYPE -eq 1 ]]; then
	imagetool-uncompressed.py arch/arm/boot/Image ${ROOT_PATH}/boot/kernel.img >> $LOG 2>&1
elif [[ $RASP_TYPE -eq 2 ]]; then
	cp arch/arm/boot/zImage ${ROOT_PATH}/boot/kernel7.img >> $LOG 2>&1
fi
cp arch/arm/boot/dts/*.dtb ${ROOT_PATH}/boot/ >> $LOG 2>&1
cp arch/arm/boot/dts/overlays/*.dtb* ${ROOT_PATH}/boot/overlays/ >> $LOG 2>&1
cp arch/arm/boot/dts/overlays/README ${ROOT_PATH}/boot/overlays/ >> $LOG 2>&1
printResult $?
#}}}

echo -en "\t$HSTAR Installing the kernel config file (8/9): " #{{{
cp .config Makefile ${ROOT_PATH}/usr/src/linux/ >> $LOG 2>&1
printResult $?
#}}}

echo -e "\t$HSTAR Cleaning all the stuffs (9/9): " #{{{
cd ../../
if [[ $KEEP_FILES -ne 1 ]]; then
	echo -en "\t\t$HSTAR Deleting stuffs: "
	rm -Rf $WDIR >> $LOG 2>&1
	BUFFER=$?
	printResult $BUFFER
	if [[ $BUFFER -ne 0 ]]; then
		echo -e "\t\t\tUnable to clean and delete the temporary directory"
		exit 1
	fi
fi
cd .. >> $LOG 2>&1
#}}}
exit 0
